{"version":3,"sources":["componets/AddCategory.js","helpers/getGifs.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAiB1C,OACI,oCACA,0BAAMC,SAXgB,SAACC,GACvBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAOd,wBAAIO,UAAU,wCAAd,WACA,2BACIC,KAAK,OACLC,MAAOV,EACPW,SApBc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,WAuBvB,uBAAGF,UAAU,oCAAmC,wF,uBC/B3CK,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,iDACoCC,UAAUH,GAD9C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATvB,kBAaXM,GAbW,4CAAH,sDCENO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,yBAAKR,UAAU,QACX,yBAAKsB,IAAKd,EAAKe,IAAKL,IACpB,2BAAIA,KCFHM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAETa,ECHY,SAACb,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WACNvB,EAAOC,GACFuB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLd,KAAMiB,EACNL,SAAS,YAI1B,CAACnB,IAEGoB,EDhBeM,CAAa1B,GAA5BO,KAEP,OACI,oCACA,4BAAKP,GAIL,yBAAKN,UAAU,mDAEHmB,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEfnBkB,EAAe,WAAO,IAAD,EAEE3C,mBAAS,CAAC,KAFZ,mBAEvBe,EAFuB,KAEbhB,EAFa,KAI9B,OACI,oCACI,wBAAIU,UAAU,wCAAd,yCACA,6BACA,kBAAC,EAAD,CAAaV,YAAaA,IAC1B,4BAEQgB,EAASS,KAAI,SAAAT,GAAQ,OACjB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UCbtC6B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.52b764bc.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropType from 'prop-types'\n\nexport const AddCategory = ({setCategory}) => {\n    \n    const [inputValue, setinputValue] = useState('');\n    \n    const handleInputChange = (e) =>{\n        setinputValue(e.target.value);\n    }\n\n    const handleInputSubmit = (e) =>{\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategory(cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    }\n\n    return (\n        <>\n        <form onSubmit={handleInputSubmit}>\n            <h3 className='animate__animated animate__heartBeat'>Buscar:</h3>\n            <input \n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n        \n        <p className='animate__animated animate__pulse'><strong>Por Ejemplo: Naruto, Dragon Ball, Pokemon... etc.</strong></p>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropType.func.isRequired\n}\n","export const getGif = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cORfzRZaYUfeOAUMDC0e2HTzm7f3g7Gi`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => { \n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className='card'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n    const {data:images} = useFetchGifs(category);\n    \n    return (\n        <>\n        <h3>{category}</h3>\n\n        {/* {loading && <p>Cargando...</p>} */}\n\n        <div className=\"card-grid animate__animated animate__backInDown\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport {getGif} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGif(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    });\n                }); \n            })\n    }, [category])\n\n    return state;\n}\n ","import React, { useState } from 'react';\nimport { AddCategory } from './componets/AddCategory';\nimport { GifGrid } from './componets/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [category, setCategory] = useState(['']);\n\n    return ( \n        <>\n            <h2 className='animate__animated animate__heartBeat'>Busca el Gif de tu personaje favorito</h2>\n            <hr></hr>\n            <AddCategory setCategory={setCategory}/>\n            <ol>\n                {\n                    category.map(category =>\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    );\n}\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}